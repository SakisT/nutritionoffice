//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace nutritionoffice.SMService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="smsPortTypeBinding", Namespace="http://j2ee.netbeans.org/wsdl/sms")]
    public partial class smsService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback sendOperationCompleted;
        
        private System.Threading.SendOrPostCallback queryOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public smsService() {
            this.Url = global::nutritionoffice.Properties.Settings.Default.nutritionoffice_SMService_smsService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event sendCompletedEventHandler sendCompleted;
        
        /// <remarks/>
        public event queryCompletedEventHandler queryCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://j2ee.netbeans.org/wsdl/sms", ResponseNamespace="http://j2ee.netbeans.org/wsdl/sms", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("id")]
        public string send(string username, string password, string from, [System.Xml.Serialization.XmlArrayItemAttribute("recipients", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)] string[] to, string text, string coding, bool flash) {
            object[] results = this.Invoke("send", new object[] {
                        username,
                        password,
                        from,
                        to,
                        text,
                        coding,
                        flash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendAsync(string username, string password, string from, string[] to, string text, string coding, bool flash) {
            this.sendAsync(username, password, from, to, text, coding, flash, null);
        }
        
        /// <remarks/>
        public void sendAsync(string username, string password, string from, string[] to, string text, string coding, bool flash, object userState) {
            if ((this.sendOperationCompleted == null)) {
                this.sendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendOperationCompleted);
            }
            this.InvokeAsync("send", new object[] {
                        username,
                        password,
                        from,
                        to,
                        text,
                        coding,
                        flash}, this.sendOperationCompleted, userState);
        }
        
        private void OnsendOperationCompleted(object arg) {
            if ((this.sendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendCompleted(this, new sendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://j2ee.netbeans.org/wsdl/sms", ResponseNamespace="http://j2ee.netbeans.org/wsdl/sms", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string query(string username, string password, string message_id, string recipient) {
            object[] results = this.Invoke("query", new object[] {
                        username,
                        password,
                        message_id,
                        recipient});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void queryAsync(string username, string password, string message_id, string recipient) {
            this.queryAsync(username, password, message_id, recipient, null);
        }
        
        /// <remarks/>
        public void queryAsync(string username, string password, string message_id, string recipient, object userState) {
            if ((this.queryOperationCompleted == null)) {
                this.queryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnqueryOperationCompleted);
            }
            this.InvokeAsync("query", new object[] {
                        username,
                        password,
                        message_id,
                        recipient}, this.queryOperationCompleted, userState);
        }
        
        private void OnqueryOperationCompleted(object arg) {
            if ((this.queryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.queryCompleted(this, new queryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendCompletedEventHandler(object sender, sendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void queryCompletedEventHandler(object sender, queryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class queryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal queryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591